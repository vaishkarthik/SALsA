<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net46</TargetFramework>
  </PropertyGroup>
<!--
    *******************************************************************************************************************
    This file contains the CBT modules that you want to use.  Modules are standard NuGet packages that apply to the
    whole project tree rather than on a per-project basis.  Modules provide extensions to your build in a centralized
    way and act as a replacement of having to check-in all of the build logic.
    
    Modules include build extensions such as:
    
      1. Analyzing source code and/or build output
      2. Assembly versioning
      3. Policy enforcement
      4. Strong-name signing of build output
    
    To find more modules, use "NuGet.exe list CBT.*" or browse a list at http://commonbuildtoolset.github.io
    *******************************************************************************************************************
  -->

  <ItemGroup>
  <!--
    *******************************************************************************************************************
    CBT.Traversal module provides the build logic to have a dirs.proj which defines the projects you want built in a
    hosted build environment.  Use this module if you want more control over your official build output and are willing
    to move away from Visual Studio solution files.
    *******************************************************************************************************************
  -->
    <PackageReference Include="CBT.Traversal" Version="2.0.102" />

  <!--
    *******************************************************************************************************************
    CBT.NuGet module provides NuGet package restore from the command-line prior to build.  This allows users to not
    have to restore before building a project tree.  This is mostly useful for hosted builds which run from a command-
    line environment rather than Visual Studio.
    *******************************************************************************************************************
  -->
    <PackageReference Include="CBT.NuGet" Version="3.0.27" />

  <!--
    *******************************************************************************************************************
    CBT.DotNetFx provides the .NET Framework reference assemblies so that users do not have to have them installed to
    build your projects.  When using this module, be sure to include ALL of the versions of the target frameworks that
    your projects use.  For example, if your projects target .NET 4.5 and .NET 4.6, you'll need to include both of the
    corresponding modules.

    By default build packages are disabled when added to the cbtmodules project.
    To use any build package globally it must be enabled for the code base.
    Do this by setting Enable#NuGetPackageID# where the . is replaced with _.
    Example add this property to your Directory.Build.props for the CBT.DotNetFx-net46 package.
    <EnableCBT_DotNetFx-net46>true</EnableCBT_DotNetFx-net46>
    *******************************************************************************************************************
  -->
    <PackageReference Include="CBT.DotNetFx-net452" Version="1.0.0-beta01" />
    <PackageReference Include="CBT.DotNetFx-net461" Version="1.0.0-beta01" />

  <!--
    *******************************************************************************************************************
    CBT.CloudBuild configures your projects for CloudBuild and QuickBuild
    *******************************************************************************************************************
  -->
    <PackageReference Include="CBT.CloudBuild" Version="1.2.26" />

    <PackageReference Include="MSBuild.Extension.Pack" Version="1.9.1"/>

    <PackageReference Include="CBT.NoTarget" Version="1.0.35"/>

  <!--
    *******************************************************************************************************************
    CBT.AssemblyInfo module provides assembly information and versioning.  The default versioning is date-based but can
    be customized to suite your needs.

    When using the module, you'll have to remove the duplicate assembly attributes which are set by Visual Studio
    templates in each project's "Properties\AssemblyInfo.cs"

    Add a build\local\Extensions\AssemblyInfo.props to inject localization from a file
    *******************************************************************************************************************
  -->
    <PackageReference Include="CBT.AssemblyInfo" Version="2.0.44"/>

  <!--
    *******************************************************************************************************************
    NuProj is a standard build package which contains the logic to build a .nuproj project.  Including it as a module
    makes it available to all projects.  NuProj projects currently do not allow packages so it must be included here.
    *******************************************************************************************************************
  -->
    <PackageReference Include="NuProj" version="0.11.30" />

  <!--
    *******************************************************************************************************************
    NuProj.Common is a standard build package that is required when a .nuproj is building a project reference.  
    *******************************************************************************************************************
  -->
    <PackageReference Include="NuProj.Common" version="0.11.30" />

  <!--
    *******************************************************************************************************************
    Output Everything to the bin directory or to location defined in the CBTOverrideBaseOutputPath

    Example: Add the following property to Durectory.Build.props at root:
    
        <CBTOverrideBaseOutputPath>$(EnlistmentRoot)\out\$(Configuration)-$(Platform)</CBTOverrideBaseOutputPath>

      Caution: This feature might not work with all project types.

    *******************************************************************************************************************
  -->
    <PackageReference Include="cbt.onebranch.unifiedoutputdir" Version="2.0.29-beta2" />
    
    <PackageReference Include="CBT.OneBranch.Robocopy" Version="1.0.1" />
    
  <!--
    *******************************************************************************************************************
    Needed for AzureSDK CCProj porject types.
    See: https://www.1eswiki.com/wiki/CBT_(Common_Build_Toolset)#CloudBuild_-_Azure_SDK_Projects_.28CCPROJ.29

    *******************************************************************************************************************
  -->
    <PackageReference Include="Microsoft.Azure.Sdk" Version="2.9.6-beta01" />

  <!--
    *******************************************************************************************************************
    SLN generation package    https://github.com/jeffkl/SlnGen/tree/master/docs
    Add the following in your $(EnlistmentRoot)\dirs.proj after the $(TraversalTargets) project import:
   --> 
   <!-- 
      *********************
       Create and Load dirs.sln in VS 2017
       From a Developer Command Prompt for VS 2017 CMD:
       To generate dirs.sln only:
            1. "msbuild /t:SlnGen"
       To generate dirs.sln and load in VS 2017:
            2. "msbuild /t:SlnGen /p:SlnGenLaunchVisualStudio=true"
      *********************
      <PropertyGroup>
        <SlnGenLaunchVisualStudio Condition="'$(SlnGenLaunchVisualStudio)' == ''">false</SlnGenLaunchVisualStudio>
        <SlnGenSolutionFileFullPath>$(MSBuildProjectDirectory)\$(MSBuildProjectName).sln</SlnGenSolutionFileFullPath>
        <SlnGenUseShellExecute>false</SlnGenUseShellExecute>
        <SlnGenCollectStats>true</SlnGenCollectStats>
        <SlnGenDevEnvFullPath>$(VSINSTALLDIR)Common7\IDE\devenv.exe</SlnGenDevEnvFullPath>
      </PropertyGroup>
      <Import Project="$(CBTModule_SlnGen)\build\SlnGen.targets" Condition="Exists('$(CBTModule_SlnGen)\build\SlnGen.targets')"/>
      *******************************************************************************************************************
    -->
  <PackageReference Include="SlnGen" Version="2.0.34-beta" />

  <!--
    *******************************************************************************************************************
    CBT.OneBranch.Localization is the CBT module which enables localization build and
    which also works with downstream localization pipeline for handoff & handback.
    See http://aka.ms/CBTloc for instructions on how to leverage the module to enable localization.
    *******************************************************************************************************************
  -->
  <PackageReference Include="CBT.OneBranch.Localization" Version="1.2.0" />

  </ItemGroup>
  <Import Project="$(EnlistmentRoot)\OneBranch\Modules\OneBranch.proj" Condition="Exists('$(EnlistmentRoot)\OneBranch\Modules\OneBranch.proj')" />
</Project>