<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(CBTModule_MSBuild_Extension_Pack)\build\net40\msbuild.extension.pack.targets" Condition=" Exists('$(CBTModule_MSBuild_Extension_Pack)\build\net40\msbuild.extension.pack.targets') " />

  <PropertyGroup>
    <RobocopyRetryCount Condition="'$(RobocopyRetryCount)'==''">0</RobocopyRetryCount>
    <RobocopyRetryWait Condition="'$(RobocopyRetryWait)'==''">400</RobocopyRetryWait>
    <RobocopyFilesAfterTargets Condition=" '$(RobocopyFilesAfterTargets)' == '' " >AfterBuild</RobocopyFilesAfterTargets>
    <RobocopyDefaultDestinationFolder Condition=" '$(RobocopyDefaultDestinationFolder)' == '' ">$(EnlistmentRoot)\Target\$([MSBuild]::MakeRelative('$(EnlistmentRoot)\', $(MSBuildProjectDirectory)))</RobocopyDefaultDestinationFolder>
  </PropertyGroup>
  <ItemDefinitionGroup>
    <Robocopy>
      <FileMatch>*.*</FileMatch>
      <Options>/mir</Options>
      <DestinationFolder>$(RobocopyDefaultDestinationFolder)</DestinationFolder>
    </Robocopy>
  </ItemDefinitionGroup>
  <!--
    ============================================================
    * RobocopyFiles : Run a robocopy-like task on Robocopy items
    * [IN]
    * $(RobocopyRetryCount)          : Number of attempts to make on copy failure
    * $(RobocopyRetryWait)           : Time to wait between attempts on copy failure
    * @(Robocopy)            : File or Directory to copy
    *   %(DestinationFolder) : Target destination, rooted (can be semicolon delimited for multiple paths)
    *   %(FileMatch)         : Space delimited match strings, using batch wildcards (e.g., foo* ba*r b?az)
    *   %(FileExclude)       : Space delimited file exclude matches, using batch wildcards
    *   %(DirExclude)        : Space delimited dir exclude matches, using batch wildcards
    *   %(Options)           : Additional options to specify to robocopy like /mir
  -->
  <Target Name="RobocopyFiles" AfterTargets="$(RobocopyFilesAfterTargets)" DependsOnTargets="$(RobocopyFilesDependsOn)" Condition="'@(Robocopy)' != ''" Inputs="%(Robocopy.Identity)" Outputs="bogus">
    <PropertyGroup>
      <_RobocopyOptionsXF>%(Robocopy.FileExclude)</_RobocopyOptionsXF>
      <_RobocopyOptionsXD>%(Robocopy.DirExclude)</_RobocopyOptionsXD>
      <_RobocopyOptions>%(Robocopy.Options) $(_RobocopyOptions)</_RobocopyOptions>
      <_RobocopyOptions Condition=" '$(RobocopyRetryCount)' != '' ">/R:$(RobocopyRetryCount) $(_RobocopyOptions)</_RobocopyOptions>
      <_RobocopyOptions Condition=" '$(RobocopyRetryWait)' != '' ">/W:$(RobocopyRetryWait) $(_RobocopyOptions)</_RobocopyOptions>
      <_RobocopyOptions Condition=" '$(_RobocopyOptionsXF)' != '' ">/XF $(_RobocopyOptionsXF) $(_RobocopyOptions)</_RobocopyOptions>
      <_RobocopyOptions Condition=" '$(_RobocopyOptionsXD)' != '' ">/XD $(_RobocopyOptionsXD) $(_RobocopyOptions)</_RobocopyOptions>
    </PropertyGroup>
    <Error Text="A destination location for %(Robocopy.Identity) must be specified." Condition=" '%(Robocopy.DestinationFolder)' == '' "/>
    <Error Text="A source location for %(Robocopy.Identity) must exist." Condition=" !Exists('%(Robocopy.Identity)') "/>
    <MSBuild.ExtensionPack.FileSystem.RoboCopy Source="%(Robocopy.Identity)" Destination="%(Robocopy.DestinationFolder)" Files="%(Robocopy.FileMatch)" Options="$(_RobocopyOptions)">
      <Output TaskParameter="ExitCode" PropertyName="Exit" />
      <Output TaskParameter="ReturnCode" PropertyName="Return" />
    </MSBuild.ExtensionPack.FileSystem.RoboCopy>
  </Target>
</Project>