// ---------------------------------------------------------------------
// DOB	: 2020-03-24
// Author : romalh@microsoft.com
//
// Summary :
// This job joins Azcrp.GuestAgentExtensionEvents data with ComputeAnalytics.Usage.Daily
// and Microsoft.Cloud.C360.Dimensions.CustomerSubscriptions
// to enrich the extension data.  Enrichment adds some of the following
// metadata.
//
//  1. Subscription ID, and subscription metadata
//  2. Image publisher, offer, sku, and version where applicable.
//  3. CRP's VM ID.,
//  4. Deployment, OS Disk, and Subscription creation time.
//
// This job publishes the AzCrp.GuestAgentExtensionUsage stream.
//
// Change Log:
// 2020-03-24 (romalh) - Create the cook script

MODULE @"/shares/AzureAnalytics.Prod/Sdk/AzureAnalytics1.4.module" AS AzureAnalytics;

// Job variables

#DECLARE IsCasJob bool = "@@jobFrequency@@".StartsWith("@@") == false;

// The begin/end dates used by the job scheduler

#IF (@IsCasJob)
    #DECLARE BeginDate DateTime = DateTime.Parse(@@startDateTime@@);
    #DECLARE EndDate   DateTime = DateTime.Parse(@@endDateTime@@);
#ELSE
    #DECLARE BeginDate DateTime = DateTime.UtcNow().AddHours(-1);
    #DECLARE EndDate   DateTime = DateTime.UtcNow();
#ENDIF

#DECLARE CasJobBeginPublish string = @BeginDate.ToUniversalTime().ToString("yyyy-MM-dd HH:mmZ");
#DECLARE CasJobBegin string = @BeginDate.ToUniversalTime().ToString("yyyy-MM-dd HH:mmZ");
#DECLARE CasJobEnd   string = @EndDate.ToUniversalTime().ToString("yyyy-MM-dd HH:mmZ");

// Initialize the list of streams consumed by this job.
 
AzureAnalytics.Initialize(entity = "ComputeAnalytics.Usage.Daily");
AzureAnalytics.Initialize(entity = "Microsoft.Cloud.C360.Dimensions.CustomerSubscription");
AzureAnalytics.Initialize(entity = "AzCrp.GuestAgentExtensionEvents");

// Select all non heartbeat events from AzCrp.GuestAgentExtensionEvents

stGuestAgentExtensionEvents = AzureAnalytics.LoadStream( 
    entity = "AzCrp.GuestAgentExtensionEvents", 
    startDateTime = @CasJobBegin,
    endDateTime = @CasJobEnd);

stGuestAgentExtesionEventsNormalized = SELECT 
    ActivityId,
    Cluster,
    ContainerId,
    DataCenter,
    GAVersion,
    Message,
    Name,
    NodeId,
    NodeIdentity,
    Operation,
    Util.StringToBool(OperationSuccess) AS OperationSuccess,
    OSVersion,
    ProviderGuid,
    RoleInstanceName,
    RoleName,
    TenantName,
    TIMESTAMP,
    Util.ToString(Version) AS Version,
    OS,
    Distro,
    DistroVersion,
    KernelVersion
 FROM stGuestAgentExtensionEvents;
      

stGuestAgentExtensionEventsNonHeartbeat = SELECT  
    ActivityId,
    Cluster,
    ContainerId,
    DataCenter,
    GAVersion,
    Message,
    Name,
    NodeId,
    NodeIdentity,
    Operation,
    OperationSuccess,
    OSVersion,
    ProviderGuid,
    RoleInstanceName,
    RoleName,
    TenantName,
    TIMESTAMP,
    Version,
    OS,
    Distro,
    DistroVersion,
    KernelVersion 
FROM stGuestAgentExtesionEventsNormalized 
WHERE string.IsNullOrWhiteSpace(ContainerId) == false && Operation != "ProcessGoalState" && Operation != "HeartBeat";

// Select heartbeat events
// Most of the time GA is not doing anything but sending heartrtbeat events so one event per container id should be enough
// Using ANY_VALUE instead of ANY_VALUE because its more efficient

stGuestAgentExtensionEventsHeartbeat = SELECT     
    ANY_VALUE(ActivityId)        AS ActivityId,
    ANY_VALUE(Cluster)           AS Cluster,
    ContainerId,
    ANY_VALUE(DataCenter)        AS DataCenter,
    ANY_VALUE(GAVersion)         AS GAVersion,
    ANY_VALUE(Message)           AS Message,
    ANY_VALUE(Name)              AS Name,
    ANY_VALUE(NodeId)            AS NodeId,
    ANY_VALUE(NodeIdentity)      AS NodeIdentity,
    ANY_VALUE(Operation)         AS Operation,
    ANY_VALUE(OperationSuccess)  AS OperationSuccess,
    ANY_VALUE(OSVersion)         AS OSVersion,
    ANY_VALUE(ProviderGuid)      AS ProviderGuid,
    ANY_VALUE(RoleInstanceName)  AS RoleInstanceName,
    ANY_VALUE(RoleName)          AS RoleName,
    ANY_VALUE(TenantName)        AS TenantName,
    ANY_VALUE(TIMESTAMP)         AS TIMESTAMP,
    ANY_VALUE(Version)           AS Version,
    ANY_VALUE(OS)                AS OS,
    ANY_VALUE(Distro)            AS Distro,
    ANY_VALUE(DistroVersion)     AS DistroVersion,
    ANY_VALUE(KernelVersion)     AS KernelVersion 
FROM stGuestAgentExtesionEventsNormalized
WHERE string.IsNullOrWhiteSpace(ContainerId) == false && Operation == "HeartBeat" GROUP BY ContainerId;

stGuestAgentExtensionEventsUnified = SELECT * FROM stGuestAgentExtensionEventsNonHeartbeat UNION ALL
                                     SELECT * FROM stGuestAgentExtensionEventsHeartbeat;

// Select one row per subscription id from the Microsoft.Cloud.C360.Dimensions.CustomerSubscriptions stream

stSubscriptions = AzureAnalytics.LoadSnapshot(
    entity = "Microsoft.Cloud.C360.Dimensions.CustomerSubscriptions");

stGlobalSubscriptions = SELECT
    SubscriptionGuid,
    ANY_VALUE(C360_ID)                    AS C360_ID,
    ANY_VALUE(CustomerName)               AS CustomerName,
    ANY_VALUE(IsVL)                       AS IsVL,
    ANY_VALUE(IsDirect)                   AS IsDirect,
    ANY_VALUE(BillingSystem)              AS BillingSystem,
    ANY_VALUE(BillableAccountId)          AS BillableAccountId,
    ANY_VALUE(TPID)                       AS TPID,
    ANY_VALUE(OrgID)                      AS OrgID,
    ANY_VALUE(PCN)                        AS PCN,
    ANY_VALUE(StartsOn)                   AS StartsOn,
    ANY_VALUE(EndsOn)                     AS EndsOn,
    ANY_VALUE(TPName)                     AS TPName,
    ANY_VALUE(SegmentName)                AS SegmentName,
    ANY_VALUE(VerticalName)               AS VerticalName,
    ANY_VALUE(VerticalCategoryName)       AS VerticalCategoryName,
    ANY_VALUE(IndustryName)               AS IndustryName,
    ANY_VALUE(SystemName)                 AS SystemName,
    ANY_VALUE(IsFraudIdentified)          AS IsFraudIdentified,
    ANY_VALUE(FraudIdentifiedDate)        AS FraudIdentifiedDate,
    ANY_VALUE(SubscriptionCreatedDate)    AS SubscriptionCreatedDate,
    ANY_VALUE(SubscriptionStartDate)      AS SubscriptionStartDate,
    ANY_VALUE(SubscriptionEndDate)        AS SubscriptionEndDate,
    ANY_VALUE(CurrentSubscriptionStatus)  AS CurrentSubscriptionStatus,
    ANY_VALUE(OfferId)                    AS OfferId,
    ANY_VALUE(OfferName)                  AS OfferName,
    ANY_VALUE(IsTrial)                    AS IsTrial,
    ANY_VALUE(FriendlySubscriptionName)   AS FriendlySubscriptionName,
    ANY_VALUE(EnrollmentNumber)           AS EnrollmentNumber,
    ANY_VALUE(AI_ChannelType)             AS AI_ChannelType,
    ANY_VALUE(DeactivationReasonName)     AS DeactivationReasonName,
    ANY_VALUE(DUNSNumber)                 AS DUNSNumber,
    ANY_VALUE(OfferType)                  AS OfferType,
    ANY_VALUE(CloudCustomerGuid)          AS CloudCustomerGuid,
    ANY_VALUE(OriginalCustomerName)       AS OriginalCustomerName,
    ANY_VALUE(PaidIncludedQuantity)       AS PaidIncludedQuantity,
    ANY_VALUE(TrialIncludedQuantity)      AS TrialIncludedQuantity,
    ANY_VALUE(TrialStartDate)             AS TrialStartDate,
    ANY_VALUE(TrialEndDate)               AS TrialEndDate,
    ANY_VALUE(PaidStartDate)              AS PaidStartDate,
    ANY_VALUE(PaidEndDate)                AS PaidEndDate,
    ANY_VALUE(TrialToPaidConversionDate)  AS TrialToPaidConversionDate,
    ANY_VALUE(AI_FirstInvoiceDate)        AS AI_FirstInvoiceDate,
    ANY_VALUE(AI_LastInvoiceDate)         AS AI_LastInvoiceDate,
    ANY_VALUE(LastTrialExtendedDate)      AS LastTrialExtendedDate,
    ANY_VALUE(LastDisabledDate)           AS LastDisabledDate,
    ANY_VALUE(LastWarnedDate)             AS LastWarnedDate,
    ANY_VALUE(DeprovisionedDate)          AS DeprovisionedDate,
    ANY_VALUE(TenantCountryCode)          AS TenantCountryCode,
    ANY_VALUE(ServiceUseCountryCode)      AS ServiceUseCountryCode,
    ANY_VALUE(BillToCountryCode)          AS BillToCountryCode,
    ANY_VALUE(CloudCustomerName)          AS CloudCustomerName,
    ANY_VALUE(AI_IsSupport)               AS AI_IsSupport,
    ANY_VALUE(UsageType)                  AS UsageType
FROM stSubscriptions
GROUP BY
    SubscriptionGuid;

// Select one row per VMId from ComputeAnalytics.Usage.Daily

stComputeUsageDaily = AzureAnalytics.LoadStream(
    entity = "ComputeAnalytics.Usage.Daily",
    startDateTime = @CasJobBegin,
    endDateTime = @CasJobEnd);

stGlobalComputeUsageDaily = SELECT
    VMId,
    ANY_VALUE(DeploymentId)              AS DeploymentId,
    ANY_VALUE(Location)                  AS Location,
    ANY_VALUE(DataCenter)                AS DataCenter,
    ANY_VALUE(Cluster)                   AS Cluster,
    ANY_VALUE(Cloud)                     AS Cloud,
    ANY_VALUE(VPCount)                   AS VPCount,
    ANY_VALUE(QuantityVMs)               AS QuantityVMs,
    ANY_VALUE(QuantityCores)             AS QuantityCores,
    ANY_VALUE(UsageHours)                AS UsageHours,
    ANY_VALUE(VMMemory)                  AS VMMemory,
    ANY_VALUE(NodeIdentity)              AS NodeIdentity,
    ANY_VALUE(Os)                        AS Os,
    ANY_VALUE(OsType)                    AS OsType,
    ANY_VALUE(Size)                      AS Size,
    ANY_VALUE(SizeFamily)                AS SizeFamily,
    ANY_VALUE(SwType)                    AS SwType,
    ANY_VALUE(IsCrp)                     AS IsCrp,
    ANY_VALUE(IsMarketplace)             AS IsMarketplace,
    ANY_VALUE(Role)                      AS Role,
    ANY_VALUE(RoleInstance)              AS RoleInstance,
    ANY_VALUE(IsContainerServiceVM)      AS IsContainerServiceVM,
    ANY_VALUE(ContainerOrchestrator)     AS ContainerOrchestrator,
    ANY_VALUE(ContainerType)             AS ContainerType,
    ANY_VALUE(ContainerPool)             AS ContainerPool,
    ANY_VALUE(ContainerClusterId)        AS ContainerClusterId,
    ANY_VALUE(ContainerIndex)            AS ContainerIndex,
    ANY_VALUE(BillingContext)            AS BillingContext,
    ANY_VALUE(SourceImageName)           AS SourceImageName,
    ANY_VALUE(SourceImageType)           AS SourceImageType,
    ANY_VALUE(Extensions)                AS Extensions,
    ANY_VALUE(LastRoleStartTime)         AS LastRoleStartTime,
    ANY_VALUE(MinutesSinceLastRoleStart) AS MinutesSinceLastRoleStart,
    ANY_VALUE(AverageCPU)                AS AverageCPU,
    ANY_VALUE(AverageCPUCores)           AS AverageCPUCores,
    ANY_VALUE(AverageDiskReadBytesSec)   AS AverageDiskReadBytesSec,
    ANY_VALUE(AverageDiskWriteBytesSec)  AS AverageDiskWriteBytesSec,
    ANY_VALUE(TotalNetworkIn)            AS TotalNetworkIn,
    ANY_VALUE(TotalNetworkOut)           AS TotalNetworkOut,
    ANY_VALUE(SubscriptionId)            AS SubscriptionId,
    ANY_VALUE(DeploymentCreatedTime)     AS DeploymentCreatedTime,
    ANY_VALUE(DeploymentRdfeOsFamily)    AS DeploymentRdfeOsFamily,
    ANY_VALUE(HostedServiceName)         AS HostedServiceName,
    ANY_VALUE(DeploymentName)            AS DeploymentName,
    ANY_VALUE(SdkVersion)                AS SdkVersion,
    ANY_VALUE(VNetId)                    AS VNetId,
    ANY_VALUE(MaxCPU)                    AS MaxCPU,
    ANY_VALUE(AverageMaxCPU)             AS AverageMaxCPU,
    ANY_VALUE(IsInLBSet)                 AS IsInLBSet,
    ANY_VALUE(AvailabilitySetName)       AS AvailabilitySetName,
    ANY_VALUE(CRPVMId)                   AS CRPVMId,
    ANY_VALUE(ResourceGroupName)         AS ResourceGroupName,
    ANY_VALUE(DesiredPowerState)         AS DesiredPowerState,
    ANY_VALUE(OSDiskTimeCreated)         AS OSDiskTimeCreated,
    ANY_VALUE(VMSize)                    AS VMSize,
    ANY_VALUE(VMScaleSetModelVersion)    AS VMScaleSetModelVersion,
    ANY_VALUE(PartNumber)                AS PartNumber,
    ANY_VALUE(OrderNumber)               AS OrderNumber,
    ANY_VALUE(CRPOffer)                  AS CRPOffer,
    ANY_VALUE(CRPPublisher)              AS CRPPublisher,
    ANY_VALUE(CRPSku)                    AS CRPSku,
    ANY_VALUE(CRPVersion)                AS CRPVersion,
    ANY_VALUE(VMScaleSetId)              AS VMScaleSetId,
    ANY_VALUE(VMScaleSetName)            AS VMScaleSetName,
    ANY_VALUE(IsVMScaleSet)              AS IsVMScaleSet,
    ANY_VALUE(VMScaleSetTimeCreated)     AS VMScaleSetTimeCreated,
    ANY_VALUE(ComputerName)              AS ComputerName,
    ANY_VALUE(OSDiskOSType)              AS OSDiskOSType,
    ANY_VALUE(IsServiceFabricVM)         AS IsServiceFabricVM,
    ANY_VALUE(ManagedOSDiskIOType)       AS ManagedOSDiskIOType,
    ANY_VALUE(IsManagedOSDisk)           AS IsManagedOSDisk,
    ANY_VALUE(IsPremiumOSDisk)           AS IsPremiumOSDisk
FROM stComputeUsageDaily
GROUP BY
    VMId;

// Join the three streams together to produce extension usage data

// Main

output = SELECT
    // == GuestAgentExtensionEvents ==
	
    TIMESTAMP,
    ActivityId,
    ContainerId,
    GAVersion,
    Name,
    Version,
    Operation,
    OperationSuccess,
    Message,
    OS,
    Distro,
    DistroVersion,
    KernelVersion,
    OSVersion,
    Cluster,
    DataCenter,
    ProviderGuid,
    NodeId,
    NodeIdentity,
    RoleInstanceName,
    TenantName,

    // == ComputeUsageDaily ==
	
    Location,

    // == VM ==
    ComputerName AS VMName,
    ResourceGroupName,
    AvailabilitySetName,
    DesiredPowerState,
    LastRoleStartTime,
    MinutesSinceLastRoleStart,
    OSDiskOSType,
    OSDiskTimeCreated,
    IsServiceFabricVM,
	
	// == Extensions ==
    Extensions,

    // == VM stats ==
    string.IsNullOrWhiteSpace(Size) ? VMSize : Size AS VMSize,
    // SizeFamily    // e.g. Standard_A, seems redundant
    VPCount,
    VMMemory,
    QuantityVMs,
    QuantityCores,   // QuantityVMs * VPCount ??
    UsageHours,      // 24 * QuantityCores ??

    // == VM Image ==
    SwType,
    IsMarketplace,
    IsCrp,
    CRPVMId       AS CrpVMId,
    CRPOffer      AS CrpOffer,
    CRPPublisher  AS CrpPublisher,
    CRPSku        AS CrpSku,
    CRPVersion    AS CrpVersion,
    SourceImageType,
    SourceImageName,

    // == VM metadata ==
    Cloud,           // global, china, germany, usgov
    Role,
    RoleInstance,
    DeploymentCreatedTime,
    DeploymentRdfeOsFamily,
    HostedServiceName,
    DeploymentName,
    SdkVersion,

    // == Network/VMSS ==
    VNetId,
    IsInLBSet,
    IsVMScaleSet,
    VMScaleSetId,
    VMScaleSetName,
    VMScaleSetTimeCreated,
    VMScaleSetModelVersion,

    // == Container ==
    IsContainerServiceVM,
    ContainerOrchestrator,
    ContainerType,
    ContainerPool,
    ContainerClusterId,
    ContainerIndex,

    // == Subscription ==
	
    BillingContext,
    SubscriptionId,
    FriendlySubscriptionName,
    CurrentSubscriptionStatus,
    SubscriptionCreatedDate,
    SubscriptionStartDate,
    SubscriptionEndDate,
    CustomerName,
    OriginalCustomerName,
    AI_ChannelType,
    AI_FirstInvoiceDate,
    AI_IsSupport,
    AI_LastInvoiceDate,
    BillToCountryCode,
    BillableAccountId,
    BillingSystem,
    CloudCustomerName,
    CloudCustomerGuid,
    DUNSNumber AS DunsNumber,
    DeactivationReasonName,
    DeprovisionedDate,
    EndsOn,
    EnrollmentNumber,
    FraudIdentifiedDate,
    IndustryName,
    IsDirect,
    IsFraudIdentified,
    IsTrial,
    IsVL,
    LastDisabledDate,
    LastTrialExtendedDate,
    LastWarnedDate,
    OfferId,
    OfferName,
    OfferType,
    OrgID,
    PCN,
    PaidEndDate,
    PaidIncludedQuantity,
    PaidStartDate,
    SegmentName,
    ServiceUseCountryCode,
    StartsOn,
    SystemName,
    TPID,
    TPName,
    TenantCountryCode,
    TrialEndDate,
    TrialIncludedQuantity,
    TrialStartDate,
    TrialToPaidConversionDate,
    UsageType,
    VerticalCategoryName,
    VerticalName,

    PartNumber,
    OrderNumber,
    
    // == IO / Performance ==
    IsManagedOSDisk,
    IsPremiumOSDisk,
    ManagedOSDiskIOType,
    AverageCPU,
    AverageCPUCores,
    MaxCPU,
    AverageMaxCPU,
    AverageDiskReadBytesSec,
    AverageDiskWriteBytesSec,
    TotalNetworkIn,
    TotalNetworkOut,
    C360_ID 
FROM stGuestAgentExtensionEventsUnified
LEFT OUTER JOIN stGlobalComputeUsageDaily ON
    stGuestAgentExtensionEventsUnified.ContainerId == stGlobalComputeUsageDaily.VMId
LEFT JOIN stGlobalSubscriptions ON
    stGlobalComputeUsageDaily.SubscriptionId == stGlobalSubscriptions.SubscriptionGuid;


// Final Output
#IF (@IsCasJob)
    AzureAnalytics.PublishStream(
        entity          = "AzCrp.GuestAgentExtensionUsage",
        startDateTime   = @CasJobBeginPublish,
        periodInMinutes = "@@jobFrequency@@",
        input           = output,
        expiryInDays    = "90",
        clusteredBy     = "ContainerId",
        sortedBy        = "ContainerId,TIMESTAMP",
        serviceOid      = "ae53b53f-9347-4198-b9b7-ff4b8228d6a7"
    );
#ELSE
    OUTPUT output TO SSTREAM "/my/cook-usage00.ss"
      CLUSTERED BY ContainerId
      SORTED BY ContainerId, TIMESTAMP;
#ENDIF

// C-Sharp Code

#CS
	
public static class Util {

	public static bool? StringToBool(object obj)
	{
		if(obj is bool || obj is bool?)
		{
			return (bool?)obj;
		}
		else if(obj is string)
		{		
			if(obj == "True" || obj == "true" || obj == "1")
			{
				return true;
			}
			else if (obj == "False" || obj == "false" || obj == "0")
			{
				return false;
			}
		}
		return false;
	}

	public static string ToString(object obj)
	{
		return obj.ToString();
	}
}

#ENDCS